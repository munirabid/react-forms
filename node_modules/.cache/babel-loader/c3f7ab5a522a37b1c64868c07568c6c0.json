{"ast":null,"code":"var _jsxFileName = \"C:\\\\Muneer\\\\React\\\\react-forms\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef(\"\");\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log(\"input is valid\");\n    }\n  }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n\n    if (event.target.value !== '') {\n      setenter;\n    }\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue); //nameInputRef.current.value = \"\"; //NOT ReCOMENDED Approach because dom is directly affected.\n\n    setEnteredName(\"\");\n  };\n\n  const nameInputIsValid = !enteredNameIsValid && enteredNameTouched;\n  const formClasses = nameInputIsValid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: formClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        value: enteredName,\n        onBlur: nameInputBlurHandler,\n        onChange: nameInputChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), nameInputIsValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Input is invalid\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"bm/27lsNsiIXuRMukf2inprCLH4=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["C:/Muneer/React/react-forms/src/components/SimpleInput.js"],"names":["useRef","useState","useEffect","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","console","log","nameInputChangeHandler","event","target","value","setenter","nameInputBlurHandler","trim","formSubmissionHandler","preventDefault","enteredValue","current","nameInputIsValid","formClasses"],"mappings":";;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,SAA3B,QAA4C,OAA5C;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,YAAY,GAAGL,MAAM,CAAC,EAAD,CAA3B;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,kBAAD,EAAqBC,qBAArB,IAA8CR,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACS,kBAAD,EAAqBC,qBAArB,IAA8CV,QAAQ,CAAC,KAAD,CAA5D;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,kBAAJ,EAAwB;AACtBI,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACD;AACF,GAJQ,EAIN,CAACL,kBAAD,CAJM,CAAT;;AAMA,QAAMM,sBAAsB,GAAIC,KAAD,IAAW;AACxCR,IAAAA,cAAc,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;;AAEA,QAAGF,KAAK,CAACC,MAAN,CAAaC,KAAb,KAAuB,EAA1B,EAA6B;AAC3BC,MAAAA,QAAQ;AACT;AACF,GAND;;AAQA,QAAMC,oBAAoB,GAAG,MAAM;AACjCR,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AACA,QAAIL,WAAW,CAACc,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BX,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;AACD;AACF,GAND;;AAQA,QAAMY,qBAAqB,GAAIN,KAAD,IAAW;AACvCA,IAAAA,KAAK,CAACO,cAAN;AACAX,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AACA,QAAIL,WAAW,CAACc,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BX,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;AACD;;AAEDA,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ;AACA,UAAMiB,YAAY,GAAGlB,YAAY,CAACmB,OAAb,CAAqBP,KAA1C;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYU,YAAZ,EAZuC,CAcvC;;AACAhB,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAhBD;;AAkBA,QAAMkB,gBAAgB,GAAG,CAACjB,kBAAD,IAAuBE,kBAAhD;AACA,QAAMgB,WAAW,GAAGD,gBAAgB,GAChC,sBADgC,GAEhC,cAFJ;AAGA,sBACE;AAAM,IAAA,QAAQ,EAAEJ,qBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEK,WAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,GAAG,EAAErB,YADP;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,EAAE,EAAC,MAHL;AAIE,QAAA,KAAK,EAAEC,WAJT;AAKE,QAAA,MAAM,EAAEa,oBALV;AAME,QAAA,QAAQ,EAAEL;AANZ;AAAA;AAAA;AAAA;AAAA,cAFF,EAUGW,gBAAgB,iBAAI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVvB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAaE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAbF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CArED;;GAAMtB,W;;KAAAA,W;AAuEN,eAAeA,WAAf","sourcesContent":["import { useRef, useState, useEffect } from \"react\";\n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef(\"\");\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log(\"input is valid\");\n    }\n  }, [enteredNameIsValid]);\n\n  const nameInputChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n\n    if(event.target.value !== ''){\n      setenter\n    }\n  };\n\n  const nameInputBlurHandler = () => {\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === \"\") {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n\n    //nameInputRef.current.value = \"\"; //NOT ReCOMENDED Approach because dom is directly affected.\n    setEnteredName(\"\");\n  };\n\n  const nameInputIsValid = !enteredNameIsValid && enteredNameTouched;\n  const formClasses = nameInputIsValid\n    ? \"form-control invalid\"\n    : \"form-control\";\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={formClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          ref={nameInputRef}\n          type=\"text\"\n          id=\"name\"\n          value={enteredName}\n          onBlur={nameInputBlurHandler}\n          onChange={nameInputChangeHandler}\n        />\n        {nameInputIsValid && <p className=\"error-text\">Input is invalid</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}