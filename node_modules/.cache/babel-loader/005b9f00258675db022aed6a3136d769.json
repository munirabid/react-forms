{"ast":null,"code":"var _jsxFileName = \"C:\\\\Muneer\\\\React\\\\react-forms\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== \"\");\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput\n  } = useInput(value => value.trim() !== \"\" && value.includes(\"@\"));\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    if (enteredName.trim() === \"\") {\n      return;\n    }\n\n    resetNameInput();\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  };\n\n  const formClasses = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  const emailClasses = emailInputIsInValid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: formClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredName,\n        onBlur: nameBlurHandler,\n        onChange: nameChangeHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        value: enteredEmail,\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), emailInputIsInValid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Invalid email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"pBS+yLf+7wnrqNx1qXDC5Mj7V8s=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["C:/Muneer/React/react-forms/src/components/SimpleInput.js"],"names":["useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangeHandler","emailBlurHandler","resetEmailInput","includes","formIsValid","emailInputChangeHandler","event","setEnteredEmail","target","emailInputBlurHandler","setEnteredEmailTouched","formSubmissionHandler","preventDefault","formClasses","emailClasses","emailInputIsInValid"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: resetNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: resetEmailInput,\n  } = useInput((value) => value.trim() !== \"\" && value.includes(\"@\"));\n\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const emailInputChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const emailInputBlurHandler = () => {\n    setEnteredEmailTouched(true);\n  };\n\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n\n    if (enteredName.trim() === \"\") {\n      return;\n    }\n\n    resetNameInput();\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n  };\n\n  const formClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n  const emailClasses = emailInputIsInValid\n    ? \"form-control invalid\"\n    : \"form-control\";\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={formClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          value={enteredName}\n          onBlur={nameBlurHandler}\n          onChange={nameChangeHandler}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n      <div className={emailClasses}>\n        <label htmlFor=\"email\">Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          value={enteredEmail}\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n        />\n        {emailInputIsInValid && <p className=\"error-text\">Invalid email</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}