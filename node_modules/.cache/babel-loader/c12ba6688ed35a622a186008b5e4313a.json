{"ast":null,"code":"var _jsxFileName = \"C:\\\\Muneer\\\\React\\\\react-forms\\\\src\\\\components\\\\BasicForm.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport useInputNew from \"./../hooks/use-input-new\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst BasicForm = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: enteredNameHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: nameReset\n  } = useInputNew(value => value.trim() !== \"\");\n  const {\n    value: enteredLastName,\n    isValid: enteredLastNameIsValid,\n    hasError: enteredLastNameHasError,\n    valueChangeHandler: lastNameChangeHandler,\n    inputBlurHandler: lastNameBlurHandler,\n    reset: lastNameReset\n  } = useInputNew(value => value.trim() !== \"\");\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: enteredEmailHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: emailReset\n  } = useInputNew(value => value.trim() !== \"\" && value.includes(\"@\"));\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid && enteredLastNameIsValid) {\n    formIsValid = true;\n  }\n\n  const nameInputClasses = enteredNameHasError ? \"form-control invalid\" : \"form-control\";\n  const lastNameInputClasses = enteredLastNameHasError ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = enteredEmailHasError ? \"form-control invalid\" : \"form-control\";\n\n  const submitFormHandler = event => {\n    event.preventDefault();\n    nameReset();\n    lastNameReset();\n    emailReset();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: submitFormHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"control-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: nameInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"First Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          value: enteredName,\n          onChange: nameChangeHandler,\n          onBlur: nameBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), enteredNameHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Name can not be empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: lastNameInputClasses,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"lastName\",\n          children: \"Last Name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"lastName\",\n          value: enteredLastName,\n          onChange: lastNameChangeHandler,\n          onBlur: lastNameBlurHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), enteredLastNameHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error-text\",\n          children: \"Name can not be empty\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"emailName\",\n        children: \"E-Mail Address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"emailName\",\n        value: enteredEmail,\n        onChange: emailChangeHandler,\n        onBlur: emailBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), enteredEmailHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Invalid email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n\n_s(BasicForm, \"SvD72S54GjCIhsWwFX/6FxjBZZ8=\", false, function () {\n  return [useInputNew, useInputNew, useInputNew];\n});\n\n_c = BasicForm;\nexport default BasicForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"BasicForm\");","map":{"version":3,"sources":["C:/Muneer/React/react-forms/src/components/BasicForm.js"],"names":["React","useInputNew","BasicForm","props","value","enteredName","isValid","enteredNameIsValid","hasError","enteredNameHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","nameReset","trim","enteredLastName","enteredLastNameIsValid","enteredLastNameHasError","lastNameChangeHandler","lastNameBlurHandler","lastNameReset","enteredEmail","enteredEmailIsValid","enteredEmailHasError","emailChangeHandler","emailBlurHandler","emailReset","includes","formIsValid","nameInputClasses","lastNameInputClasses","emailInputClasses","submitFormHandler","event","preventDefault"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport useInputNew from \"./../hooks/use-input-new\";\n\nconst BasicForm = (props) => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: enteredNameHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurHandler,\n    reset: nameReset,\n  } = useInputNew((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredLastName,\n    isValid: enteredLastNameIsValid,\n    hasError: enteredLastNameHasError,\n    valueChangeHandler: lastNameChangeHandler,\n    inputBlurHandler: lastNameBlurHandler,\n    reset: lastNameReset,\n  } = useInputNew((value) => value.trim() !== \"\");\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: enteredEmailHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurHandler,\n    reset: emailReset,\n  } = useInputNew((value) => value.trim() !== \"\" && value.includes(\"@\"));\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid && enteredLastNameIsValid) {\n    formIsValid = true;\n  }\n\n  const nameInputClasses = enteredNameHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const lastNameInputClasses = enteredLastNameHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = enteredEmailHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    nameReset();\n    lastNameReset();\n    emailReset();\n  };\n\n  return (\n    <form onSubmit={submitFormHandler}>\n      <div className=\"control-group\">\n        <div className={nameInputClasses}>\n          <label htmlFor=\"name\">First Name</label>\n          <input\n            type=\"text\"\n            id=\"name\"\n            value={enteredName}\n            onChange={nameChangeHandler}\n            onBlur={nameBlurHandler}\n          />\n          {enteredNameHasError && (\n            <p className=\"error-text\">Name can not be empty</p>\n          )}\n        </div>\n        <div className={lastNameInputClasses}>\n          <label htmlFor=\"lastName\">Last Name</label>\n          <input\n            type=\"text\"\n            id=\"lastName\"\n            value={enteredLastName}\n            onChange={lastNameChangeHandler}\n            onBlur={lastNameBlurHandler}\n          />\n          {enteredLastNameHasError && (\n            <p className=\"error-text\">Name can not be empty</p>\n          )}\n        </div>\n      </div>\n      <div className=\"form-control\">\n        <label htmlFor=\"emailName\">E-Mail Address</label>\n        <input\n          type=\"email\"\n          id=\"emailName\"\n          value={enteredEmail}\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n        />\n        {enteredEmailHasError && <p className=\"error-text\">Invalid email</p>}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default BasicForm;\n"]},"metadata":{},"sourceType":"module"}